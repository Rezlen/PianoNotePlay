CSS Selector Reference: https://www.w3schools.com/cssref/css_selectors.asp

Image Link
<img src="kayakdc.gif" alt="KayakDoorCounty.net" width="500" height="60"></h1>
Image Hyperlink:
<a href="index.html"><img src="home.gif" alt="home" width="90" height="35"></a> &nbsp;
------------
Graph codes; 
<meter value="1043"  min="0" max="14417">1043</meter> 1,043 Safari<br>
<meter value="312"  min="0" max="14417">312</meter> &nbsp;&nbsp; 312 Opera<br>
Progress Report
<progress value="5" max="10">50%</progress> Progress Toward Our Go
--------
put Background photo:
img {border: none;}
main {background-image: url(heroback.jpg);
background-repeat: no-repeat;}
--------
Image Map;
<area href="http://nature.org"  shape="rect" coords="0,51,416,170" alt="The Nature Conservancy" title="The Nature Conservancy">

Float Css:
.float { float: left; margin-right: 10px; border: 3px ridge #000000; }
<div>
<img class="float" src="yls.jpg" alt="Yellow Lady Slipper" height="100" width="100">
------------------------
Universal BOX sizing; (STAR is for universal selecting)
 * { box-sizing: border-box; }

File adderssing;
	<li><a href="juniper.html">Juniper Room</a></li>
	<li><a href="../events/weekend.html">Weekend Events</a></li>
	<li><a href="../events/festival.html">Festivals</a></li>
	<li><a href="../contact.html">Contact</a></li>
  </ul>

CSS Sprite: combines the smaller images to larger images like Using the same image in nav menue. Using the same css iamge for the background. csssprites.com
Combines few images into one infact; with codes.
----------------------
Moving the window to a specific part of the page-Fragment Identifiers.png:
<ul>
  <li><a href="#hobbies">Hobbies</a></li>
  <li><a href="#HTML5">HTML5</a></li>
  <li><a href="#CSS">CSS</a></li>
</ul>
<h2 id="Hobbies">Hobbies</h2>
     <dl>
       <dt>Running</dt>
         <dd><a target="_blank" href="http://www.runningnetwork.com">http://www.runningnetwork.com</a></d> /Target Help opening a new page.
--------------------------------
Page Block Block kardan be komak tagseem bandi: and for older browsers:
header, nav, main, footer, aside { display: block; }
* { box-sizing: border-box;} {if older browsers, they know everyting is in order, boxing and rendered}

body { margin:0;
       background-color: #FFFFFF; }
For older browsers, body margin 0 means there wont be extra area outside of our "body" page, the same for colour.

Module 7: Links, Layout, & Mobile
Three-column CSS Page Layout Pt 3

Important cause explain the need/how to code for older browsers. always rememeber.

View Port Meta tag was developed by Alplle for Safari browser, to be viewable better on android devices.
<meta name= "viewport" content="width=device, initial-scale=1.0"> 

Container minimum, ensure if the browser size reachs that size, scrolling option appears.
#container { background-color: #EEEEEE;
             color: #0fc40f;
             min-width: 960px;
             font-family: Verdana, Arial, sans-serif; }
---------------------------
Media & Mobil design;
@media only screen and (max-width: 1024px) {
    body { margin: 0; }
    #wrapper { width: auto; }
    main { margin-left: 0; }
    nav { float: none; width: auto; }
    nav li { display: inline-block; padding: 0.5em; }
    nav ul { text-align: center; }
    nav a { border-style: none; }
    h1, h2 { font-size: 120%; }
    p { font-size: 90%; }
--------------------------
Image Responsive;
<picture>
        <source media="(min-width: 1200px)" srcset="large.jpg">
        <source media="(min-width: 800px)" srcset="medium.jpg">
		<source media="(min-width: 320px)" srcset="small.jpg">
        <img src="fallback.jpg" alt="water wheel"> 
</picture>
-------------------
Mobine device Display coloumn;
@media only screen and (max-width: 1024px) {
            body { margin: 0; padding: 0; } 
            #wrapper { width: auto; margin: 0; }
		    h1 { font-size: 200%; }
			#demo { flex-direction: column;
            }
		    nav ul { display: flex;
                     flex-direction: row;
				     justify-content: center; 
			}
			nav li { padding: 0 0.5em; 
				     font-size: 1.2em;
			}
			
}		
@media only screen and (max-width: 768px) {
         	nav { order: 1;   }
		   nav ul { flex-wrap: wrap; }
}
-----------------------
Grid Design Mobile friendly;
header, h1, #wrapper{ margin-top: 0; }
#wrapper {  background-color: #F4E8BC; 
	        width: 90%;
			margin: auto;
            color: #330000;
			display: grid;
            grid-template-columns: 160px 1fr 160px;
            grid-template-rows: 200px auto 100px;
nav { grid-row: 2 / 3;
	  grid-column: 1 / 2;
}
main {   grid-row: 2 / 3;
         grid-column: 2 / 3;
}
aside { grid-row: 2 / 3;
        grid-column: 3 / 4;
}

=====JavaScript
  userInput=userInput.toLowerCase();
    const randomNumber = Math.floor(Math.random()*3);

======================
To bring up a blank page, we can enter about:blank into the browser’s address bar. We can confirm that there is no HTML inside the <body> element of the page by checking document.body.innerHTML in the console:
============
document.body.innerHTML = "<h1> Adding a heading using JS</h1>"
$("body").style.fontStyle="italic"
==========
function generateTarget() {
 return Math.floor(Math.random()*10 );
 ===============
 // here remover the negative/minues sign from the number, and find which nimber is nearer to our target number
function compareGuesses(humanGuess, computerGuess, targetGuess) {
const humanDiff = Math.abs(targetGuess-humanGuess); // 2-9=7
const computerDiff = Math.abs(targetGuess-computerGuess); // 2-3=1
  if (humanDiff <= computerDiff) { // 1<6
    return true;
  } else {
    return false;
   } // or insteas of this If use this: return humanDiff <= computerDiff; 
};

// here we update th winner score after each win
const updateScore = winner => {
   if (winner==='human') {
    humanScore++;
  } else if (winner==='computer') {
    computerScore++;
  } 
}; 

===================
const countries = ['Japan', 'Denmark', 'Mexico', 'Morocco'];
countries.shift();
console.log(countries); 
countries =  ['England', 'Mozambique', 'Cambodia', 'Peru']; 
console.log(countries); 

The second array will not be logged to the console because a variable declared with const cannot be reassigned.

============Git Guide============
git init= Initilise Git
git add "a file name"
git Status= display all file in RED or Green (Green means it is added to the staging area AND ready to be commited to the Repository). (Red means it is NOT added to the staging area)
git diff filename=  check the differences between the working directory and the staging area. It showes the changes in GREEN colour.
git commit -m "My First Commit"
git log= Commits are stored chronologically in the repository and can be viewed
git show HEAD= The output of this command will display everything the git log command displays for the HEAD commit, plus all the file changes that were committed.
git checkout HEAD filename = Discards changes in the working directory.You could rewrite the line how it was originally, but what if you forgot the exact wording? The command. will restore the file in your working directory to look exactly as it did when you last made a commit. Here, filename again is the actual name of the file. If the file is named changes.txt, the command would be "git checkout HEAD changes.txt"
git add filename_1 filename_2 = 
git reset HEAD filename = Unstages file changes in the staging area.. This command resets the file in the staging area to be the same as the HEAD commit. It does not discard file changes from the working directory, it just removes them from the staging area. Outcome in Terminal: "M" Notice in the output, “Unstaged changes after reset”: M filename.
git reset commit_SHA AND git reset 5d69206 = (Return the previous commit). Resets to a previous commit in your commit history..This command works by using the first 7 characters of the SHA of a previous commit. For example, if the SHA of the previous commit is 5d692065cf51a2f50ea8e7b19b5a7ae512f633ba
git add . = The . means “all files”. Adding files to the staging area with . is faster than specifying each file individually, but it’s easy to accidentally add files you don’t want there. Make sure you always know what you’re adding.

git stash = git stash, which allows you to get back to a clean commit point with a synchronized working tree, and avoid losing your local changes in the process. You’re “stashing” your local work temporarily in order to update a previous commit and later on retrieve your work.
Few kind of GIT LOG:
git log --oneline= shows the list of commits in one line format.
git log -S "keyword" = displays a list of commits that contain the keyword in the message. In the screenshot below, we use git log -S "Add" to find any commits with “Add” in the message.
git log --oneline --graph - --graph = Displays a visual representation of how the branches and commits were created in order to help you make sense of your repository history. When used alone, the description can be very lengthy, so you can combine the command with --oneline in order to shorten the description.
Git’s --amend = (git commit --amend) flag is extremely useful when updating a commit, it allows you to correct mistakes and edit commits easily instead of creating a completely new one.
$ git commit --amend --no-edit = However, if you want to keep the same commit message, you can simply add the flag --no-edit:

Git alias = If you have a set of commands that you use regularly and want to save some time from typing them, you can easily set up an alias for each command using Git config.
Once the aliases are configured, next time you want to check out to another branch you could type the command:
$ git co example_branch
Instead of:
$ git checkout example_branch
$ rm -fr .git = delete every file in the repostory
$ git add . = Sends everything to STAGE section ready to commit
git commit -m "My First Commit"
git branch -M main = Sends/Pushes everyting to the remote repo
git push -u origin main = Sends/Pushes everyting to the remote repo
----
git add .
git commit -m "My First Commit"
git branch -M main
git push -u origin main
----
rfce: Auto import: Type rfce and that prints a ready function in the editor.
npm -v react-dom OR npm -v gives you the version of npm not react-dom version. npm view react version for React version.
----

Navigating directories in bash= https://www.codecademy.com/courses/learn-the-command-line/lessons/navigation/exercises/learn-the-command-line-review

$ git config --global user.name "Rezlen"
$ git config --global user.email "soheilyreza@yahoo.com"

all NPM commands: https://docs.npmjs.com/cli/v6/commands/npm-install
npx create-react-app my-app --template redux    =>  Create React App
npm install -g node-modules  OR npm install => Installing Node Mudules

npm run build   => 

git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Rezlen/ReactRouting.git
git push -u origin main
…or push an existing repository from the command line
git remote add origin https://github.com/Rezlen/ReactRouting.git
git branch -M main
git push -u origin main
----------
npm install THEN  npm start
-------
npm install --save react-router-dom@5.2.0
-------
To check that you were successful, ensure that react-router-dom appears in the "dependencies" object located within your project’s package.json file.
-----------
Filename too long in Git for Windows:
git config --system core.longpaths true

If warning then below:
git config core.longpaths true

---------------

git branch   => Check what branch you are currently on & List all branches. In the output, the * (asterisk) is showing you what branch you’re on. The project only has one branch at this time.
git branch new_branch  =>To create a new branch
git checkout branch_name  => switch to the new branch 
git add filename   => add files to the staging area
git commit -m "Commit message"   => for committing
git log  => command is used to view the commit history and display the necessary information of the git repository.
git merge branch_name   => merging the branch into master, instead of the BRANCH NAME, add file/brunch that you want to the master.
to resolve a commit conflict you can remove the git markings:
<<<<<<< HEAD
master/code version of code line
=======
File/branch Changed version of code line
>>>>>>> fencing
====================

git branch -d branch_name    => delete the specified branch from your Git project.
git branch -D branchname     => Never Merged= delete the specified branch from your Git project.
git clone remote_location clone_name    => cloning a git repo. "remote_location" is the path of the rmote to be copied AND "clone_name" is the name of the clone/repo you create
git remote -v    => see a list of a Git project’s remotes with the command. The remote is listed twice: once for (fetch) and once for (push)
cd "Repo Name"   => Change directories
git fetch   => An easy way to see if changes have been made to the remote and bring the changes down to your local copy. This command will not merge changes from the remote into your local repository. It brings those changes onto what’s called a remote branch. Learn better: https://www.codecademy.com/paths/full-stack-engineer-career-path/tracks/fscp-22-git-and-github-part-ii/modules/wdcp-22-git-teamwork/lessons/git-teamwork/exercises/git-fetch
git merge origin/master   => use the git merge command to integrate origin/master into your local master branch.
git push origin <your_branch_name>   => Pushes a local branch to the origin remote. will push your branch up to the remote, origin. From there, Shilan can review your branch and merge your work into the master branch, making it part of the definitive project version.
pwd   => printing the working directory. Seeing where you are

Git workflow
Now that you’ve merged origin/master into your local master branch, you’re ready to contribute some work of your own. The workflow for Git collaborations typically follows this order:
1- Fetch and merge changes from the remote
2- Create a branch to work on a new project feature
3- Develop the feature on your branch and commit your work
4- Fetch and merge from the remote again (in case new commits were made while you were working)
5- Push your branch up to the remote for review
Steps 1 and 4 are a safeguard against merge conflicts, which occur when two branches contain file changes that cannot be merged with the git merge command. Step 5 involves git push, a command you will learn in the next exercise.

A pull request is a feature of GitHub and other source code management tools to review code before merging it from one branch to another, usually the main branch.
https://www.youtube.com/watch?v=11qp6nGz-RQ
--------------------
netlify error:
React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array react-hooks/exhaustive-deps
Failed to compile.
"build.command" failed 
Command failed with exit code 127: CI=npm run build 

soloution
Just delete the entry in the "Build Command" field and sace it empty. Then sometime add a forward slash to the "Publish directory" field after the word BUILD
OR: create a file: _redirects and add: /* /index.html 200     in this video;  here: https://www.youtube.com/watch?v=WtjeUuz1VhI

===============

node   => listing all of the core modules built into Node.js
require('module').builtinModules   =>  Once in the REPL, a complete list of core modules can be accessed by typing the command
===============



const I  =  {};

I.am = 'a front-end Developer';
I.love = ['My wife', 'Web Development', 'Inventing', 'Traveling The  World & Going to the Moon', 'Meeting New People' ];
I.workWith = ['HTML5', 'CSS3', 'React.JS', 'JavaScript', 'Node.JS', 'SnowBallEffects', 'Nuxt.JS', 'Vue.JS']
I.aspire = 'to inspire others to make the world a better place & live an ever lasing memory after themselves.'
I.secret = 'Did you know, on browsers you can -with permission- access the contact lists and' 
           'create a worldwide snowball effect and revolutionize your organization business!';

=============
============Configure and deploy Firebase Hosting sites==============
$ npm install -g firebase-tools
https://www.youtube.com/watch?v=RDV3Z1KCBvo insructio video from minutes: 4:37

firebase login
firebase init >
Hosting: Configure and deploy Firebase Hosting sites >
Please sellect an option > use an existing project > (Choose the project you have created in Firebase)
What do you want to use as your public directory? (public) build
Configure as a single-page app (rewrite all urls to /index.html)? (y/N) y
Set up automatic builds and deploys with GitHub? (y/N) n
THEN: npm run build (a shortcut command: npm run build && firebase deploy --only hosting)
Lastly: firebase deploy
Project Console: https://console.firebase.google.com/project/amazo-clone1/overview
Hosting URL: https://amazo-clone1.web.app

===============axios.js===============
after creating its faile: axios.js run this command: npm i axios
AXIOS is way of writing REQUESTS. It is a great FETCHING library
=========== after completing the Payment.js, you run the: firebase init
Are you ready to proceed? Yes
Functions: Configure a Cloud Functions directory and its files
? What language would you like to use to write Cloud Functions? JavaScript
? Do you want to use ESLint to catch probable bugs and enforce style? y
+  Wrote functions/package.json
+  Wrote functions/.eslintrc.js
+  Wrote functions/index.js
+  Wrote functions/.gitignore
? Do you want to install dependencies with npm now? y
===============
Functions folder is the full backend. and has its own Node Modules, Json etc. At this point if you do npm INSTALL, it must be in the FUNCTIONS folder, otherwise it messes up things.
There we create an EXPRESS app & host it on a cloud function, escalable & full backend.
==========npm i express===========
While in the functions folder, run NPM I EXPRESS command
==========npm i cors==============
==========npm i stripe==============
Navigate in directories: 
To navigate into the root directory, use "cd /" 
To navigate to your home directory, use "cd" or "cd ~" 
To navigate BACK one directory level, use "cd .." 
To navigate to the previous directory (or back), use "cd folder name"
=========API Creation=========
1- App Config 2- Middleware 3-API routes  4- Listen command
========test the firebase & API test on local========
firebase emulators:start
THEN you find the API end point here: +  functions[us-central1-api]: http function initialized (http://localhost:5001/amazo-clone1/us-central1/api).
And all the logs here: http://localhost:4000/logs?q=metadata.emulator.name%3D%22functions%22

I had to enter"firebase emulators:start" (Restarting the backend) again next morning to start an engine, that goes to order peage after clicking on BUY NOW after going to checkout (Payment page); http://localhost:3000/payment
To check the payment has gone trhough, check the HOME at: https://dashboard.stripe.com/test/dashboard
===========
For database, go to Firebase https://console.firebase.google.com/u/0/project/amazo-clone1/firestore > Firebase Database > Start in Test Mode > 
======npm install moment=====
A great library to pass data/time stamps
in "order page" you must install MOMENT tools

=======Re-deploying functions== ===firebase deploy --only functions====
firebase deploy --only functions  >For adding new functions to your already running functions, you must be in functions folder terminal.
If this fails, you need to go to your firebase > at botom > Spark (Plan) > change to Blaze

You might fac error which can be because of the SPACES you place when naming your folder. Go to you firebase.jason file and do either of the followings:
https://stackoverflow.com/questions/48429390/firebase-deploy-errors-starting-with-non-zero-exit-code-space-in-project-path

What happens actually is that in Windows, firebase.json contains the following by default:

"predeploy": [
  "npm --prefix \"$RESOURCE_DIR\" run lint"
]
Modify it to:

"predeploy": [
  "npm --prefix \"%RESOURCE_DIR%\" run lint"
]

ORRRRRRRRR just remove:
"predeploy": [
  "npm --prefix \"$RESOURCE_DIR\" run lint"
]

that is hat I did.
Outcome of re-deploy can be seen at: https://console.firebase.google.com/project/amazo-clone1/overview then> Functions tab of the left > copy the Request link and past it in axios.js file
==========Deployings==========
Re-deploying functions: firebase deploy --only functions
Then redeploy (backend infact): npm run build
then re-deploy the hosting/front-end: firebase deploy --only hosting
==============Sometimes Error===============
If you stucked in RE-WRITE, you can remove the piece in firebase.jason

    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]

================






